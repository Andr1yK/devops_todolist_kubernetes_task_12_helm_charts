apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: {{ .Values.mysql.statefulSet.replicas }}
  serviceName: {{ .Chart.Name }}-service
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        {{- with .Values.mysql.image }}
        image: {{ .repository }}:{{ .tag }}
        {{- end }}
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_PASSWORD
        - name: MYSQL_DATABASE
          value: app_db
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: config-map
          mountPath: /docker-entrypoint-initdb.d
        resources:
          {{- with .Values.mysql.resources }}
          requests:
            cpu: {{ .cpu.request }}
            memory: {{ .memory.request }}
          {{- end }}
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      volumes:
      - name: config-map
        configMap:
          name: {{ .Chart.Name }}-config
      tolerations:
      {{- with .Values.mysql.toleration }}
      - key: {{ .key }}
        operator: "Equal"
        value: {{ .value }}
        effect: {{ .effect }}
      {{- end }}
      affinity:
        podAntiAffinity:
          {{- with .Values.mysql.podAntiAffinity }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: {{ .key }}
                    operator: In
                    values:
                    {{- range .values }}
                      - {{ . }}
                    {{ end }}
              topologyKey: {{ .topologyKey }}
          {{- end }}
        nodeAffinity:
          {{- with .Values.mysql.nodeAffinity }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: {{ .key }}
                  operator: In
                  values:
                  {{- range .values }}
                  - {{ . }}
                  {{ end }}
          {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.mysql.pvc.storageRequests }}
